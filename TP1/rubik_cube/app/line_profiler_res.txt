Timer unit: 1e-06 s

Total time: 35.4141 s
File: /home/manurodriguez/Desktop/ITBA/sia/sia-repo/TP1/rubik_cube/app/main.py
Function: main at line 9

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     9                                           def main(n):
    10         1         32.0     32.0      0.0      rubik = Rubik(n)
    11         1        196.0    196.0      0.0      rubik.cube = rubik.move(Moves.TOP_LEFT)
    12         1        194.0    194.0      0.0      rubik.cube = rubik.move(Moves.FRONT_ROTATE_CLOCKWISE)
    13         1        156.0    156.0      0.0      rubik.cube = rubik.move(Moves.BOTTOM_RIGHT)
    14         1        178.0    178.0      0.0      rubik.cube = rubik.move(Moves.FRONT_ROTATE_ANTICLOCKWISE)
    15                                               # rubik.cube = rubik.move(Moves.LEFT_DOWN)
    16                                               # rubik.cube = rubik.move(Moves.RIGHT_UP)
    17                                               # rubik.cube = rubik.move(Moves.RIGHT_UP)
    18                                               # rubik.cube = rubik.move(Moves.FRONT_ROTATE_ANTICLOCKWISE)
    19                                               # rubik.cube = rubik.move(Moves.TOP_RIGHT)
    20                                           
    21         1         55.0     55.0      0.0      print("to_string: " + rubik.to_string())
    22         1         86.0     86.0      0.0      bfs = Manager(BFS(), rubik)
    23         1   35413167.0 35413167.0    100.0      print(bfs.solve())
    24                                           
    25                                               # rubik.move(Directions.TOP_LEFT)
    26                                               # rubik.move(Directions.FRONT_ROTATE_CLOCKWISE)
    27                                               # rubik.move(Directions.RIGHT_DOWN)
    28                                               # rubik.move(Directions.RIGHT_DOWN)
    29                                               # rubik.move(Directions.LEFT_UP)
    30                                               # rubik.move(Directions.FRONT_ROTATE_CLOCKWISE)
    31                                               # rubik.move(Directions.BOTTOM_LEFT)
    32                                               # rubik.move(Directions.TOP_RIGHT)
    33                                               # rubik.move(Directions.FRONT_ROTATE_ANTICLOCKWISE)

Total time: 10.5576 s
File: /home/manurodriguez/Desktop/ITBA/sia/sia-repo/TP1/rubik_cube/app/rubik.py
Function: move at line 141

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   141                                               def move(self, move):
   142    122556     415063.0      3.4      3.9          endCube = np.array(self.cube, copy=True)
   143    245112    5399073.0     22.0     51.1          endCube = {
   144    122556     353135.0      2.9      3.3              Moves.LEFT_UP: lambda: self.move_col(endCube, 0, Directions.UP, Faces.LEFT, Rotations.ANTICLOCKWISE),
   145    122556     331540.0      2.7      3.1              Moves.LEFT_DOWN: lambda: self.move_col(endCube, 0, Directions.DOWN, Faces.LEFT, Rotations.CLOCKWISE),
   146    122556     338391.0      2.8      3.2              Moves.RIGHT_UP: lambda: self.move_col(endCube, self.n - 1, Directions.UP, Faces.RIGHT, Rotations.CLOCKWISE),
   147    122556     336089.0      2.7      3.2              Moves.RIGHT_DOWN: lambda: self.move_col(endCube, self.n - 1, Directions.DOWN, Faces.RIGHT, Rotations.ANTICLOCKWISE),
   148    122556     327310.0      2.7      3.1              Moves.TOP_LEFT: lambda: self.move_row(endCube, 0, Directions.LEFT, Rotations.CLOCKWISE),
   149    122556     324697.0      2.6      3.1              Moves.TOP_RIGHT: lambda: self.move_row(endCube, 0, Directions.RIGHT, Rotations.ANTICLOCKWISE),
   150    122556     335790.0      2.7      3.2              Moves.BOTTOM_LEFT: lambda: self.move_row(endCube, self.n - 1, Directions.LEFT, Rotations.CLOCKWISE),
   151    122556     339513.0      2.8      3.2              Moves.BOTTOM_RIGHT: lambda: self.move_row(endCube, self.n - 1, Directions.RIGHT, Rotations.ANTICLOCKWISE),
   152    122556     328820.0      2.7      3.1              Moves.FRONT_ROTATE_CLOCKWISE: lambda: self.move_rotate(endCube, Faces.FRONT, Rotations.CLOCKWISE, self.n - 1,
   153                                                                                                      Directions.UP),
   154    122556     328393.0      2.7      3.1              Moves.FRONT_ROTATE_ANTICLOCKWISE: lambda: self.move_rotate(endCube, Faces.FRONT, Rotations.ANTICLOCKWISE,
   155                                                                                                          self.n - 1, Directions.DOWN),
   156    122556     328688.0      2.7      3.1              Moves.BACK_ROTATE_CLOCKWISE: lambda: self.move_rotate(endCube, Faces.BACK, Rotations.CLOCKWISE, 0, Directions.DOWN),
   157    122556     360112.0      2.9      3.4              Moves.BACK_ROTATE_ANTICLOCKWISE: lambda: self.move_rotate(endCube, Faces.BACK, Rotations.ANTICLOCKWISE, 0,
   158                                                                                                         Directions.UP)
   159    122556     400579.0      3.3      3.8          }.get(move, 'Invalid move')()
   160                                           
   161    122556     310366.0      2.5      2.9          return endCube

Total time: 34.0532 s
File: /home/manurodriguez/Desktop/ITBA/sia/sia-repo/TP1/rubik_cube/app/search_methods/manager.py
Function: solve at line 18

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    18                                               def solve(self):
    19         1          3.0      3.0      0.0          i = 0
    20                                           
    21                                                   # para root
    22         1          2.0      2.0      0.0          node = self.border[0]
    23         1         29.0     29.0      0.0          self.border = np.delete(self.border, 0)
    24                                           
    25         1          7.0      7.0      0.0          rubikNode = Rubik(self.n, node.state)
    26                                           
    27     17460      89524.0      5.1      0.3          while not rubikNode.is_solved() and (len(self.border) > 0 or len(self.visited) == 0):
    28     17459     125221.0      7.2      0.4              if (node.state.tostring() not in self.deepsOfStates or self.deepsOfStates[node.state.tostring()] > node.deep):
    29                                                           # Solo expando cuando no he visitado el estado o si es menos profundo que cuando lo visite
    30     11141      36566.0      3.3      0.1                  self.deepsOfStates[node.state.tostring()] = node.deep
    31                                           
    32     11141      68798.0      6.2      0.2                  nextMovements = np.arange((-len(Moves) + 1) / 2, (len(Moves) - 1) / 2 + 1)
    33     11141     266431.0     23.9      0.8                  nextMovements = np.delete(nextMovements, [int((len(Moves) - 1) / 2), 6 - node.lastMovement.value])
    34     11141      63385.0      5.7      0.2                  np.random.shuffle(nextMovements)
    35     11141      62140.0      5.6      0.2                  newBorder = np.empty(len(nextMovements), dtype=Node)
    36                                           
    37    133693     263658.0      2.0      0.8                  for index, nextMovement in enumerate(nextMovements):
    38    122552     445748.0      3.6      1.3                      direction = Moves(nextMovement)
    39    122552   17599052.0    143.6     51.7                      newNode = Node(rubikNode.move(direction), node, direction, node.deep + 1)
    40    122552    1327079.0     10.8      3.9                      node.add_children(newNode)
    41    122552     216443.0      1.8      0.6                      newBorder[index] = newNode
    42                                           
    43     17459    6295940.0    360.6     18.5              self.border = self.method.insertNode(self.border, newBorder) # agrego todos los nuevos border de una
    44     17459     784216.0     44.9      2.3              self.visited = np.append(self.visited, newNode)
    45                                           
    46     17459      35958.0      2.1      0.1              node = self.border[0]
    47     17459      27668.0      1.6      0.1              if node is None:
    48                                                           print(self.border)
    49     17459    6163034.0    353.0     18.1              self.border = np.delete(self.border, 0)
    50                                           
    51     17459     119455.0      6.8      0.4              rubikNode = Rubik(self.n, node.state)
    52     17459      30577.0      1.8      0.1              i += 1
    53     17459      31890.0      1.8      0.1              if i % 1000 == 0:
    54        17        321.0     18.9      0.0                  print(i)
    55                                           
    56         1         23.0     23.0      0.0          if rubikNode.is_solved():
    57         1         24.0     24.0      0.0              print("visited nodes: " + str(len(self.visited)))
    58         1         32.0     32.0      0.0              print("result: " + str(rubikNode.to_string()))
    59         1          5.0      5.0      0.0              print("deeps of states: " + str(len(self.deepsOfStates)))
    60         1          2.0      2.0      0.0              return node
    61                                                   else:
    62                                                       raise ValueError('No solution found')

